[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "eduparse"
version = "0.1.0"
description = "Convert scanned textbook pages into structured lessons with text, images, and questions"
readme = "README.md"
requires-python = ">=3.7"
license = "Apache-2.0"
keywords = ["education", "ocr", "ai", "claude", "textbook"]
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "anthropic>=0.18.0",
    "opencv-python>=4.7.0",
    "numpy>=1.24.0",
    "pytesseract>=0.3.10",
    "Pillow>=9.4.0",
    "rich>=13.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/eduparse"
Documentation = "https://github.com/yourusername/eduparse#readme"
Repository = "https://github.com/yourusername/eduparse.git"
Issues = "https://github.com/yourusername/eduparse/issues"

[project.scripts]
eduparse = "eduparse:main"

[tool.black]
line-length = 100
target-version = ["py37"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=eduparse --cov-report=term-missing"
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true
source = ["eduparse"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
] 